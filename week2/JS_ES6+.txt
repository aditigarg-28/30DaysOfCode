Template Literals- 


let word1 = 'Dylan';
let word2 = 'Israel';
let num1 = 2;
let num2 = 3;

// const fullName = `${num1 + num2} ${word2}`;
let example = `${word1} ${word2}`;   #using value by $
// console.log(fullName);
console.log(example)
document.getElementById('example').innerText = example;
..............-------------------------------------------------------------


Destructuring objects



const player = {
  name: 'Lebron James',
  club: 'LA Lakers',
  address: {
    city: 'Los Angeles'
  }
};

// console.log( player.address.city );

const { name, club, address: { city } } = player;  //directly use by their name, no need to use it by its object name

// console.log(`${name} plays for ${club}`);

console.log(`${name} lives in ${city}`);

------------------------------------------------------------------
Destructing array

let [firstName, middleName, lastName] = ['Dylan', 'Coding God', 'Israel'];
=-------------------------------------------------------------------------------
for of loop 

let fullName = "Dylan Coding God Israel";


for (const char of fullName) {
    console.log(char);
}
-------------------------------------------------------------

spread operator


let contacts = ["Mary", "Joel", "Danny"];

let personalFriends = [ "David", ...contacts, "Lily" ];

contacts.push("John");


let person = {
    name: "Adam",
    age: 25,
    city: "Manchester"
}

let employee = {
    ...person,           //spread operator to copy old one
    salary: 50000,
    position: "Software Developer"
}

console.log(employee);
----------------------------------------------------------------

rest operator(multiple args)

function add(...nums) {
    
    console.log(nums);
}

add(4, 5, 7, 8, 12)
---------------------------------------------------------------------
//function declaration
function breakfastMenu() {
    return "I'm going to scrambled eggs for breakfast";
}

//anonymous function
const lunchMenu = function() {
    return "I'm going to eat pizza for lunch";
}

const dinnerMenu = (food) => 
{`I'm going to eat a ${food} for dinner`;}

console.log( dinnerMenu("chicken salad") );
-----------------------------------------------------------------------------
import/export


export const data = [1,2,3];  //example.js


import { data } from './example.js';    //index.js
let updatedData = data;

updatedData.push(5)
console.log(updatedData);
--------------------------------------------------------------------------------

let example = 'Dylan';

 
console.log(example.padStart(10, 'a'));    //aaaaaaaaaDylana

console.log(example.padEnd(10, 'a'));       //Dylanaaaaa

-----------------------------------------------------------------

// Promises

const buyFlightTicket = () => {
    return new Promise( (resolve, reject) => {
        setTimeout( () => {
            const error = false;
            
            if( error ) {
                reject("Sorry your payment was not successful")
            } else {
                resolve("Thank you, your payment was successful");
            }
        }, 3000)
    })
}

buyFlightTicket()
.then( (success) => console.log(success))
.catch( (error) => console.log(error) );
-----------------------------------------------------------------------------



/**
 ## Fetch
 * 
 * RESTFul API - https://jsonplaceholder.typicode.com/
 * Docs - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
 */

// fetch('https://jsonplaceholder.typicode.com/comments/1')
//     .then(response => response.json())
//     .then(data => console.log(data))

fetch('https://jsonplaceholder.typicode.com/comments', {
        method: "POST",
        body: JSON.stringify({
            postId: 1,
            name: 'Dylan',
            email: 'dylansemail310@gmail.com',
            body: 'That was dope!'
        })
    })
    .then(response => response.json())
    .then(data => console.log(data))

-------------------------------------------------------------------------------------------

Async and Await

const photos = [];

async
 function photoUpload() {
    let uploadStatus = new Promise( (resolve, reject) => {
        setTimeout( () => {
            photos.push("Profile Pic");
            resolve("Photo Uploaded")
        }, 3000)
    })
    
    let result = await uploadStatus;
    
    console.log(result);
    console.log(photos.length);
}

photoUpload();
---------------------------------------------------


Challenge - Async & Await

//Print on the console a random joke from the Chuck Norris API using Fetch and Async and Await

const apiUrl = "https://api.chucknorris.io/jokes/random";  #generate joke randomly

async function getJoke() {
    const response = await fetch(apiUrl);      //fetch API
    const data = await response.json();          // conversion to json
    
    console.log(data);
}

getJoke();

----------------------------------------------------------

sets in js

const exampleSet = new Set([1,1,1,1,2,2,2,2]);

exampleSet.add(5);
exampleSet.add(5).add(17);

console.log(exampleSet.has(5));

exampleSet.clear();

console.log(exampleSet.size);
